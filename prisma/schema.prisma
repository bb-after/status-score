datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  name      String?
  remoteAuth0ID String?
  avatar    String?
  keywords  Keyword[]
  reports   Report[]
  schedules Schedule[]
  admin     Boolean   @default(false)
  createdAt DateTime  @default(now())
  teams TeamUser[]
  stripeCustomer StripeCustomer?
  reputationSearches ReputationSearch[]
  geoSearches GeoSearch[]
  resultAnnotations ResultAnnotation[]
}

model Team {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  members   TeamUser[]
  invites   TeamInvite[]
}

model TeamUser {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    Int
  role      Role
  createdAt DateTime @default(now())

  @@unique([userId, teamId]) // Ensure that a user can belong to a team only once
}

enum Role {
  ADMIN
  MEMBER
}

model Keyword {
  id          Int          @id @default(autoincrement())
  name        String
  user        User         @relation(fields: [userId], references: [id])
  userId      Int
  reports     Report[]
  dataSources KeywordToDataSource[]  // Reference the join table
  schedules   Schedule[]
  createdAt   DateTime     @default(now())
  deletedAt DateTime? // Nullable field to track soft deletion
}

model DataSource {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  model     String
  prompt    String   @db.Text
  active    Boolean  @default(true)
  weight    Float    @default(1.0) // Weight for sentiment analysis, default value is 1.0
  createdAt DateTime @default(now())
  keywords  KeywordToDataSource[]  // Reference to the join table
  dataSourceResults DataSourceResult[] // Reference to DataSourceResult table
}

// Join table for the many-to-many relationship between Keyword and DataSource
model KeywordToDataSource {
  keywordId    Int
  dataSourceId Int
  keyword      Keyword    @relation(fields: [keywordId], references: [id])
  dataSource   DataSource @relation(fields: [dataSourceId], references: [id])

  @@id([keywordId, dataSourceId]) // Composite primary key defined at the model level
}


model Report {
  id        Int      @id @default(autoincrement())
  aiEngine  String
  prompt    String   @db.Text // Field to hold the prompt, ensure it's here
  response  String   @db.Text // Field to hold the AI response
  sentiment String   // Example values: 'positive', 'neutral', 'negative'
  payload   Json     // The full response from the AI
  imageUrl  String?  // Optional field for images, if needed
  pdfUrl    String?  // Optional field for PDFs, if needed
  keyword   Keyword  @relation(fields: [keywordId], references: [id])
  keywordId Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
  dataSourceResults DataSourceResult[] // Link to individual data source results
}


model Schedule {
  id           Int       @id @default(autoincrement())
  keyword      Keyword   @relation(fields: [keywordId], references: [id])
  keywordId    Int
  user         User      @relation(fields: [userId], references: [id])
  userId       Int
  frequency    String    
  emails       String    
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?
  scheduledRuns   ScheduledRun[]
  @@index([keywordId])
  @@index([userId])

}

model DataSourceResult {
  id           Int       @id @default(autoincrement())
  report       Report    @relation(fields: [reportId], references: [id])
  reportId     Int       // Foreign key to the Report
  dataSource   DataSource @relation(fields: [dataSourceId], references: [id])
  dataSourceId Int       // Foreign key to the DataSource
  sentiment    String    // Sentiment from this data source ('positive', 'neutral', 'negative')
  prompt       String      @db.Text // The prompt used for the AI request
  response     String    @db.Text // The response text from this data source
  payload      Json        // The full payload received from the AI
  score        Float       // Numerical representation of the sentiment
  magnitude    Float       // Numerical representation of the magnitude of the sentiment
  createdAt    DateTime  @default(now())
}

model TeamInvite {
  id       Int      @id @default(autoincrement())
  teamId   Int
  userId   Int?     // Nullable for users not yet registered
  email    String   // Email for users not yet registered
  token    String   @unique
  status   String   // PENDING, ACCEPTED, REJECTED
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  team     Team     @relation(fields: [teamId], references: [id])
}

model ScheduledRun {
  id           Int       @id @default(autoincrement())
  scheduleId   Int       // Foreign key to Schedule
  schedule     Schedule  @relation(fields: [scheduleId], references: [id])
  runAt        DateTime  @default(now()) // When this run started
  status       String    // Status (e.g., "success", "failure", "in-progress")
  errorMessage String?   // Optional, to store error messages in case of failures
  finishedAt   DateTime? // Optional, set when the run is finished
}

model StripeCustomer {
  id          Int      @id @default(autoincrement())
  userId      Int      @unique
  user        User     @relation(fields: [userId], references: [id])
  customerId  String   @unique // Stripe customer ID
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  subscriptions Subscription[]
}

model Subscription {
  id                Int      @id @default(autoincrement())
  stripeCustomerId  Int
  stripeCustomer    StripeCustomer @relation(fields: [stripeCustomerId], references: [id])
  subscriptionId    String   @unique // Stripe subscription ID
  status           String   // active, canceled, past_due, etc.
  planId           String   // Stripe price ID
  currentPeriodEnd DateTime
  cancelAtPeriodEnd Boolean @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

// Reputation Analysis Models
model ReputationSearch {
  id                Int      @id @default(autoincrement())
  user              User     @relation(fields: [userId], references: [id])
  userId            Int
  keyword           String   
  entityType        EntityType
  score             Int      // 0-100 reputation score
  positiveArticles  Int      @default(0)
  wikipediaPresence Int      @default(0)
  ownedAssets       Int      @default(0)  
  negativeLinks     Int      @default(0)
  socialPresence    Int      @default(0)
  aiOverviews       Int      @default(0)
  geoPresence       Int      @default(0)
  searchResults     Json     // Store search results as JSON
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([userId])
  @@index([keyword])
  @@index([entityType])
}

enum EntityType {
  INDIVIDUAL
  COMPANY
  PUBLIC_FIGURE
}

// GEO Analysis Models
model GeoSearch {
  id                Int      @id @default(autoincrement())
  user              User     @relation(fields: [userId], references: [id])
  userId            Int
  keyword           String   
  analysisType      AnalysisType
  intentCategory    String
  customPrompt      String?  @db.Text
  analysisId        Int?     // External service analysis ID
  overallSentiment  String?
  results           Json     // Store AI engine results as JSON
  aggregatedInsights Json?   // Store aggregated insights
  metadata          Json?    // Store metadata from external service
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([userId])
  @@index([keyword])
  @@index([analysisType])
}

enum AnalysisType {
  brand
  individual
}

// Result Annotation Models
model ResultAnnotation {
  id             String           @id @default(cuid())
  user           User             @relation(fields: [userId], references: [id])
  userId         Int
  url            String           
  keyword        String           // The search term that returned this result
  annotationType AnnotationType
  sentimentData  SentimentAnnotation?
  assetClaimData AssetClaimAnnotation?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@unique([userId, url, annotationType])
  @@index([userId])
  @@index([keyword])
  @@index([url])
}

model SentimentAnnotation {
  id           String           @id @default(cuid())
  annotation   ResultAnnotation @relation(fields: [annotationId], references: [id], onDelete: Cascade)
  annotationId String           @unique
  sentiment    SentimentType
  reason       String           @db.Text
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
}

model AssetClaimAnnotation {
  id           String           @id @default(cuid())
  annotation   ResultAnnotation @relation(fields: [annotationId], references: [id], onDelete: Cascade)
  annotationId String           @unique
  claimType    ClaimType
  reason       String           @db.Text
  verified     Boolean          @default(false) // For future verification workflows
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
}

enum AnnotationType {
  SENTIMENT
  ASSET_CLAIM
}

enum SentimentType {
  POSITIVE
  NEUTRAL
  NEGATIVE
}

enum ClaimType {
  OWNED
  NOT_OWNED
  NOT_RELEVANT
}

